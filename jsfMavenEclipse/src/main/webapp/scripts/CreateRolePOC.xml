<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="POC-Create-Role-Rule" type="Workflow">
  <Description>A rule used by a Workflow to determine a step action or variable value.

Note that an Attributes map of all variables from the current WorkflowContext, merged with the arguments from the Step, is also passed into the workflow rule.</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="wfcontext">
        <Description>
          The current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="handler">
        <Description>
          The workflow handler associated with the current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="workflow">
        <Description>
          The current Workflow definition.
        </Description>
      </Argument>
      <Argument name="step">
        <Description>
          The current Step.
        </Description>
      </Argument>
      <Argument name="approval">
        <Description>
          The current Approval.
        </Description>
      </Argument>
      <Argument name="item">
        <Description>
          The WorkItem being processed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="Object">
        <Description>
          The result of the workflow rule; dependent on the rule itself.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
	import sailpoint.object.Bundle;
	import sailpoint.object.ManagedAttribute;
	import sailpoint.object.Profile;
	import sailpoint.object.Filter;
	import sailpoint.object.Application;
	import sailpoint.object.ApplicationAccountSelectorRule;
	import sailpoint.object.Rule;
	import sailpoint.object.AccountSelectorRules;

	System.out.println(roleName);
	System.out.println(roleDisplayName);
	System.out.println(roleOwner);
	System.out.println(roleScope);
	System.out.println(roleDescription);
	System.out.println(roleApprover1);
	System.out.println(roleApprover2);
	System.out.println(roleApprover3);
	System.out.println(rolePII);
	System.out.println(roleExport);
	System.out.println(roleCID);
	System.out.println(standardEntitlements);
	System.out.println(admEntitlements);
	System.out.println(admhighEntitlements);


	Map<String,Map<String,List<String>>> getNormalizedList(List<ManagedAttribute> entitlements){
	 
	 	System.out.println("getNormalizedList - Start");
	 	System.out.println(entitlements);
	 	Map<String,Map<String,List<String>>> normalizedList = new HashMap<String,Map<String,List<String>>>();
	 	
	 	for(ManagedAttribute ma: entitlements){
	 		String appName = ma.getApplication().getName();
	 		Map<String,List<String>> entMap;
	 		List<String> entValues;
	 		if(!normalizedList.containsKey(appName)){
	 			entMap = new HashMap<String,List<String>>();
	 			entValues = new ArrayList<String>();
	 			entValues.add(ma.getValue());
	 			entMap.put(ma.getAttribute(),entValues);
	 			normalizedList.put(appName,entMap);
	 		}else{
	 			entMap = normalizedList.get(appName);
	 			if(!entMap.containsKey(ma.getAttribute())){
	 				entValues = new ArrayList<String>();
	 				entValues.add(ma.getValue());
	 				entMap.put(ma.getAttribute(),entValues);
	 			}else{
	 				entValues = entMap.get(ma.getAttribute());
	 				entValues.add(ma.getValue());
	 			}
	 		}
	 	}
	 	
	 	System.out.println(normalizedList);
	 	System.out.println("getNormalizedList - End");
	 	return normalizedList;
	 
	 }

  
	//Create Organization Role For the Department if Doesn't Exists
	
	
	//Get selected Entitlement application List
	
	
	//Create Standard IT Roles
	Bundle standardITRole = new Bundle();
	standardITRole.setName(roleName+"_Standard_IT");
	standardITRole.setDisplayName(roleName+"_Standard_IT");
	standardITRole.setDisplayableName(roleName+"_Standard_IT");
	standardITRole.setOwner(roleOwner != null? context.getObjectById(Identity.class,roleOwner):null);
	standardITRole.setDescription(roleDescription);
	standardITRole.setType("it");
	List<Profile> standardITProfiles = new ArrayList<Profile>();
	Profile p;
	AccountSelectorRules accountSelectorRules = new AccountSelectorRules();
	List appSelectorRules = new ArrayList<ApplicationAccountSelectorRule>();
	ApplicationAccountSelectorRule appSelectorRule;
	Rule standardRuleObj = context.getObjectByName(Rule.class,"Standard Account Selection Rule");
	Map<String,Map<String,List<String>>> normalizedStandardList = getNormalizedList(standardEntitlements);
	
	Iterator<Map.Entry<String,Map<String,List<String>>>> normalizedStandardListIterator = normalizedStandardList.entrySet().iterator();
	
	while (normalizedStandardListIterator.hasNext()) {
	
		Map.Entry<String,Map<String,List<String>>> entry = normalizedStandardListIterator.next();
		p=new Profile();
		Application appObj = context.getObjectByName(Application.class,entry.getKey());
		p.setApplication(appObj);
		Map<String,List<String>> entryValue = entry.getValue();
		List<Filter> filters = new ArrayList<Filter>();
		Iterator<Map.Entry<String,List<String>>> entryValueIterator = entryValue.entrySet().iterator();
		while(entryValueIterator.hasNext()){
			Map.Entry<String,List<String>> filterEntry = entryValueIterator.next();
			Filter f = Filter.containsAll(filterEntry.getKey(),filterEntry.getValue());
			filters.add(f);
		}
		p.setConstraints(filters);
		standardITProfiles.add(p);
		
		//Set Account Selector Rule
		appSelectorRule = new ApplicationAccountSelectorRule(appObj,standardRuleObj);
		appSelectorRules.add(appSelectorRule);
	}
	
	standardITRole.assignProfiles(standardITProfiles);
	
	//Set Account Selection Rule For Corresponding IT Role
	accountSelectorRules.setApplicationAccountSelectorRules(appSelectorRules);
	standardITRole.setAccountSelectorRules(accountSelectorRules);
	
	//Save IT Role
	context.saveObject(standardITRole);
	
	//Create Business Role and Attach the IT Roles
	Bundle businessRole = new Bundle();
	businessRole.setName(roleName);
	businessRole.setDisplayName(roleDisplayName);
	businessRole.setDisplayableName(roleDisplayName);
	businessRole.setOwner(roleOwner);
	businessRole.setDescription(roleDescription);
	businessRole.setType("business");
	businessRole.addRequirement(standardITRole);
	context.saveObject(businessRole);
	
	//Commit transaction
	context.commitTransaction();
  
  
  ]]></Source>
</Rule>
